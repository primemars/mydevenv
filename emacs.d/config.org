# -*- mode: org; coding: utf-8; -*-
# Source:     https://github.com/novoid/dot-emacs
# License:    This file is licensed under the GPL v3.
#+TODO: ACTIVE | DISABLED
#+STARTUP: indentn

This is the GNU/Emacs config file of

This file is named =config.org=. My =init.el= got some nifty Elisp code
that converts/tangles (only) the Elisp blocks into the =config.el=.
This generated file is interpreted by my GNU/Emacs on startup.

Note that all Elisp blocks part of a =DISABLED= heading or which are
marked with =:tangle no= won't be tangled to the =config.el= file.
Unfortunately, within the Org-mode rendering of GitHub, you won't see
the =DISABLED= keyword nor the =:tangle no= parameter of the babel
blocks. Please get the Org-mode file and open it in your Emacs directly.

Originally, I found this process on
http://www.holgerschurig.de/en/emacs-init-tangle/ However, I adapted
its code and write additional features.


Links that start with =id:= won't work for you because they link to my
personal Org-mode files.

-----------------------

Some minor tasks I plan to do with my =config.org=:

- flyspell bindkeys:
  - [ ] create a hydra some day

- [ ] FIXXME: check why Python "auto-complete mode" is disabled in my config
- [ ] FIXXME: check why Python > Ropemacs (for refactoring) is disabled in my config


* my-system-is-FOOBAR
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

Emacs config switch depending on hostname or operating system: Idea
found here: [[https://sigquit.wordpress.com/2008/09/28/single-dot-emacs-file/][Single dot emacs file and per-computer configuration | SIGQUIT]]

This is so cool: with those functions, I am able to maintain one
single Emacs configuration for /all/ of my hosts. If there is
something I want to do or do not on a specific platform or host, those
functions allow me to express my restrictions easily:

#+BEGIN_SRC emacs-lisp
;; Get current system's name
(defun my-insert-system-name()
  (interactive)
  "Get current system's name"
  (insert (format "%s" system-name))
  )

;; Get current system type
(defun my-insert-system-type()
  (interactive)
  "Get current system type"
  (insert (format "%s" system-type))
  )

;; Check if system is Darwin/Mac OS X
(defun my-system-type-is-darwin ()
  "Return true if system is darwin-based (Mac OS X)"
  (string-equal system-type "darwin")
  )

;; Check if system is Microsoft Windows
(defun my-system-type-is-windows ()
  "Return true if system is Windows-based (at least up to Win7)"
  (string-equal system-type "windows-nt")
  )

;; Check if system is GNU/Linux
(defun my-system-type-is-gnu ()
  "Return true if system is GNU/Linux-based"
  (string-equal system-type "gnu/linux")
  )
#+END_SRC
* General settings
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:
** Common
profiling:
#+BEGIN_SRC emacs-lisp
(defvar my-config-el-start-time (current-time) "Time when config.el was started")
;(profiler-start 'cpu);; test startup performance - create report with M-x profiler-report
#+END_SRC

2011-04-20: turn off backup files
#+BEGIN_SRC emacs-lisp
(setq-default backup-inhibited t)
#+END_SRC

set start of week to Monday (not sunday) http://sunsite.univie.ac.at/textbooks/emacs/emacs_33.html
#+BEGIN_SRC emacs-lisp
(setq-default calendar-week-start-day 1)
#+END_SRC

append and update time-stamps for =Time-stamp: <>= in headers:
#+BEGIN_SRC emacs-lisp
(add-hook 'write-file-hooks 'time-stamp)
#+END_SRC

set warning of opening large files to 100MB
#+BEGIN_SRC emacs-lisp
(setq-default large-file-warning-threshold 100000000)
#+END_SRC

do not add double space after periods [[http://www.reddit.com/r/emacs/comments/2l5gtz/real_sentence_in_emacs/][Real sentence in Emacs : emacs]]
#+BEGIN_SRC emacs-lisp
(setq-default sentence-end-double-space nil)
#+END_SRC

https://www.emacswiki.org/emacs/TruncateLines =M-x toggle-truncate-lines=
#+BEGIN_SRC emacs-lisp
(setq-default truncate-lines t)
#+END_SRC

[[http://stackoverflow.com/questions/7577614/emacs-truncate-lines-in-all-buffers][elisp - Emacs truncate lines in all buffers - Stack Overflow]]
#+BEGIN_SRC emacs-lisp
(setq-default global-visual-line-mode t)
#+END_SRC

inhibit the startup screen
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
#+END_SRC

English time-stamps in Org-mode (instead of localized German ones):
- http://lists.gnu.org/archive/html/emacs-orgmode/2011-10/msg01046.html
- «system locale to use for formatting time values (e.g., timestamps in Org mode files)»
- "en_US.utf8" did not work for the weekday in the agenda!
#+BEGIN_SRC emacs-lisp
(setq system-time-locale "C")
#+END_SRC

[[http://pragmaticemacs.com/emacs/adaptive-cursor-width/][Adaptive cursor width | Pragmatic Emacs]]: make cursor the width of the
character it is under; i.e. full width of a TAB:
#+BEGIN_SRC emacs-lisp
(setq x-stretch-cursor t)
#+END_SRC

Show the matching pairs of parentheses
#+begin_src emacs-lisp :tangle yes
(show-paren-mode 1)
#+end_src

(setq tab-width 4)

** Package

Configure the package manager of my GNU/Emacs.

http://www.reddit.com/r/emacs/comments/2u1bml/gnu_or_melpa_version_of_yasnippet_both_in_mx/

MELPA packages are usually built automatically from a project's
repository; the GNU repository has stable releases that are explicitly
submitted to it.

=package-user-dir= holds the directory where Emacs package manager
installs its local copies of the packages:

#+BEGIN_SRC emacs-lisp
(setq package-user-dir (concat my-user-emacs-directory "elpa"))
#+END_SRC

#+BEGIN_SRC emacs-lisp

(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;;(add-to-list 'package-archives '("marmalade" . "https://marmalade-repo.org/packages/"))
;;OLD:(add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/"));; moved to stable.melpa.org https://www.reddit.com/r/emacs/comments/4zqbz0/whats_up_with_melpa_stable/
;(setq package-archives '(("gnu" . "https://elpa.gnu.org/packages/")))

                         ;("melpa-stable" . "http://melpa-stable.milkbox.net/packages/")
;                         ("org" . "https://orgmode.org/elpa/")

(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/"))
;;(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
;(add-to-list 'package-archives
;'("popkit" . "http://elpa.popkit.org/packages/"))

;;unstable;; (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
#+END_SRC

Add [[https://github.com/jorgenschaefer/elpy][elpy repository]]:

#+BEGIN_SRC emacs-lisp
;(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
#+END_SRC


Bugfixing:
2016-01-26: fix certificate issue: "gnutls.c: [0] (Emacs) fatal error: The TLS connection was non-properly terminated."
- https://github.com/nicferrier/elmarmalade/issues/55#issuecomment-166271364
- 2016-11-05: got «(void-function gnutls-available-p)» on floyd (after org upgrade)
#+BEGIN_SRC emacs-lisp :tangle no
(if (fboundp 'gnutls-available-p)
    (fmakunbound 'gnutls-available-p))
(setq tls-program '("gnutls-cli --tofu -p %p %h")
      imap-ssl-program '("gnutls-cli --tofu -p %p %s")
      smtpmail-stream-type 'starttls
      starttls-extrna-arguments '("--tofu")
      )
#+END_SRC

Initialize packages:
(package-initialize)
#+BEGIN_SRC emacs-lisp
;; 2015-11-25: https://github.com/jwiegley/use-package
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-when-compile (require 'use-package))
(require 'diminish)
(require 'bind-key)

;; http://www.lunaryorn.com/2015/01/06/my-emacs-configuration-with-use-package.html
(setq package-enable-at-startup nil)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC

** yes-or-no-p: prefer y/n

«True #Emacs Knights are lazy and hate typing yes/no - they prefer y/n
instead. Use this (fset 'yes-or-no-p 'y-or-n-p) in your config.»
... from: http://twitter.com/emacs_knight/status/128339316417101825

#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Deletes duplicate entries of the history of the minibuffer

«If the value of this variable is t, that means when adding a new
history element, all previous identical elements are deleted.» from:
http://www.gnu.org/software/emacs/manual/html_node/elisp/Minibuffer-History.html

#+BEGIN_SRC emacs-lisp
(setq history-delete-duplicates t)
#+END_SRC

** Pasting with the mouse without moving the point

«middle-clicking pastes at the current location instead of moving it»
from: http://sachachua.com/blog/2017/04/emacs-pasting-with-the-mouse-without-moving-the-point-mouse-yank-at-point/

#+BEGIN_SRC emacs-lisp
(setq mouse-yank-at-point t)
#+END_SRC

** delete-trailing-whitespace before saving
:PROPERTIES:
:CREATED:  [2018-04-09 Mon 08:41]
:END:

Remove trailing space before save buffer
#+BEGIN_SRC emacs-lisp
;; 2016-02-06: https://www.reddit.com/r/emacs/comments/445w6s/whats_some_small_thing_in_your_dotemacs_that_you/
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Maximize frame window

Details: id:2016-03-27-maximize-window-init.el

#+BEGIN_SRC emacs-lisp
(toggle-frame-maximized)
#+END_SRC

** Browser
https://github.com/hrs/engine-mode
#+BEGIN_SRC emacs-lisp
(require 'engine-mode)
(engine-mode t)
(engine/set-keymap-prefix (kbd "C-c s"))
(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "c"
)

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g"
)

(defengine stackoverfolow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "h"
)

(defengine npmjs
  "https://www.npmjs.com/package/%s"
  :keybinding "n"
)
(defengine youtube
  "http://www.youtube.com/results?aq=f&oq=&search_query=%s")
#+END_SRC

** Copy/past for mac os
#+BEGIN_SRC emacs-lisp
(when (my-system-type-is-darwin)
(defun copy-from-osx ()
  "Use OSX clipboard to paste."
  (shell-command-to-string "reattach-to-user-namespace pbpaste"))

(defun paste-to-osx (text &optional push)
  "Add kill ring entries (TEXT) to OSX clipboard.  PUSH."
  (let ((process-connection-type nil))
    (let ((proc (start-process "pbcopy" "*Messages*" "reattach-to-user-namespace" "pbcopy")))
      (process-send-string proc text)
      (process-send-eof proc))))

(setq interprogram-cut-function 'paste-to-osx)
(setq interprogram-paste-function 'copy-from-osx)
(exec-path-from-shell-initialize)
)
#+END_SRC

** Enable window navigation
:PROPERTIES:
:CREATED:  [2018-04-05 Thu 11:38]
:END:
#+begin_src emacs-lisp :tangle yes
(windmove-default-keybindings)
#+end_src

** No tab
#+begin_src emacs-lisp :tangle yes
(setq-default indent-tabs-mode nil)
#+end_src

* Server mode
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

Start Emacs as a server process: new files can be visited via
=emacsclient= (instead of parallel =emacs= instances). Therefore, I
don't have to run multiple instances (which occupies RAM storage) and
I am able to open new files instantly.

#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC

* Styling
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

The (sub-)headings here deal with the visual appeal of my GNU/Emacs. I
like dark themes and minimized interfaces. Therefore, I hide everyting
I do not use.

Interesting read: http://www.tbray.org/ongoing/When/201x/2012/09/24/Typographic-notes

Show current column:
#+BEGIN_SRC emacs-lisp
(setq column-number-mode t)
#+END_SRC

Cursor settings:
#+BEGIN_SRC emacs-lisp
;; Prevent the cursor from blinking
;(blink-cursor-mode 0)
(set-cursor-color "IndianRed")
#+END_SRC

Flat mode-line styling:
2014-05-24: from http://www.reddit.com/r/emacs/comments/23l9oi/flat_modeline/
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'mode-line nil :box nil)
(set-face-attribute 'mode-line-inactive nil :box nil)
#+END_SRC

** Themes

Since a couple of major versions, GNU/Emacs has a built-in theme
manager. This is for dealing with the themes:

- set color theme according to day-time:
  - https://github.com/hadronzoo/theme-changer
#+BEGIN_SRC emacs-lisp :tangle no
(setq calendar-location-name "Graz, AT")
(setq calendar-latitude 47.07)
(setq calendar-longitude 15.43)
(use-package theme-changer)
(change-theme 'whiteboard 'misterioso)  ;; day and night theme
#+END_SRC

My favorite dark themes: wombat, misterioso, zenburn, material
#+BEGIN_SRC emacs-lisp
(load-theme 'wombat t) ;; dark theme
;;   (load-theme 'misterioso t)
;;   (load-theme 'zenburn t)
;;   (load-theme 'material t) ;; from http://www.reddit.com/r/emacs/comments/39dk64/escaping_from_org_mode/
;;              issues with *bold* stuff in org-mode :-(
#+END_SRC

My favorite light themes: leuven, whiteboard, solarized-light,
#+BEGIN_SRC emacs-lisp
;;   (load-theme 'leuven t) ;; from http://www.reddit.com/r/emacs/comments/39dk64/escaping_from_org_mode/
;;   (load-theme 'whiteboard t)
;;   (load-theme 'solarized-light t)
#+END_SRC

- enhanced highlighting of babel blocks: http://orgmode.org/worg/org-contrib/babel/examples/fontify-src-code-blocks.html
- issues when trying to apply face instantly: https://www.reddit.com/r/emacs/comments/3ksen6/noob_question_how_to_make_changes_after/cv0cmko
- M-x describe-face  -> show definition
- C-u C-x =          -> show all font information
#+BEGIN_SRC emacs-lisp
;  (face-spec-set 'org-block-begin-line
;    '((t (:underline "#FFFFFF" :foreground "#404040" :background "#b3b3b3")))
;    "Face used for the line delimiting the begin of source blocks.")

  ;(defface org-block-begin-line
  ;  '((t (:underline "#FFFFFF" :foreground "#cccccc" :background "#4d4d4d")))
  ;  "Face used for the line delimiting the begin of source blocks.")

  (defface org-block
    ;; defface org-block-background was removed from org:
    ;; http://emacs.stackexchange.com/questions/14824/org-block-background-font-not-having-effect
    ;; read also: https://www.reddit.com/r/emacs/comments/415imd/prettier_orgmode_source_code_blocks/
    '((t (:background "#1a1a1a")))
    "Face used for the source block background.")

  ;(defface org-block-end-line
  ;  '((t (:overline "#FFFFFF" :foreground "#cccccc" :background "#4d4d4d")))
  ;  "Face used for the line delimiting the end of source blocks.")

  ;;test: (set-face-background 'org-block-background "#1a1a1a")

#+END_SRC

- 2017-03-29: DISABLE a theme: "M-x disable-theme" + theme
  - from http://emacs.stackexchange.com/questions/3112/how-to-reset-color-theme
#+BEGIN_SRC emacs-lisp
;;    (defadvice load-theme (before theme-dont-propagate activate) (mapcar #'disable-theme custom-enabled-themes))
#+END_SRC

** Only one window on startup

«Make [current] WINDOW fill its frame.»
- http://thornydev.blogspot.co.at/2012/08/happiness-is-emacs-trifecta.html

#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-startup-hook 'delete-other-windows t)
#+END_SRC

** Font
:PROPERTIES:
:CREATED:  [2017-10-02 Mon 15:18]
:END:

#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
                         '(font . "Inconsolata"))
#+END_SRC

** Font sizes

- 2011-04-20: increase/set font size
  - http://www.emacswiki.org/emacs/SetFonts

#+BEGIN_SRC emacs-lisp
(defun my-increase-fontsize ()
  (interactive)
  "Sets the font to bigger size"
  (set-face-attribute 'default (selected-frame) :height 130)
  )
(defun my-normal-fontsize ()
  (interactive)
  "Sets the font to normal size"
  (set-face-attribute 'default (selected-frame) :height 100)
  )
#+END_SRC

Host-specific font size:
#+BEGIN_SRC emacs-lisp
(when (my-system-type-is-gnu)
  (my-increase-fontsize);; increase fonts on some hosts by default
  )
(when (my-system-type-is-darwin)
  (set-face-attribute 'default (selected-frame) :height 170);; 2011-04-20: increase/set font size http://www.emacswiki.org/emacs/SetFonts
  )
(when (my-system-type-is-windows)
  ;;(set-face-attribute 'default (selected-frame) :height 150)
  ;;(set-face-attribute 'default (selected-frame) :height 130);; 2016-08-19 let's test 130 after 150 seems too big
  (set-face-attribute 'default (selected-frame) :height 110);; 2017-09-06 detego
  )

#+END_SRC
* Short Key
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

** Self prefix
https://github.com/emacsattic/bind-key
#+BEGIN_SRC emacs-lisp
(require 'bind-key)
(bind-keys
 :prefix-map self-prefix
 :prefix-docstring "My own keyboard map"
 :prefix [f8] )
#+END_SRC

** Global
#+BEGIN_SRC emacs-lisp
(global-set-key [M-l] 'downcase-word)
(global-set-key [M-u] 'upcase-word)
(global-set-key [M-c] 'capitalize-word)
(global-set-key "\C-w" 'backward-kill-word)
(global-set-key "\C-c\C-c" 'comment-region)
(global-set-key "\C-x\C-k" 'kill-region)
(global-set-key "\M- " 'set-mark-command)
(global-set-key "\M-g" 'goto-line)
(global-set-key "\C-ca" 'org-agenda)
(global-set-key "\C-cl" 'org-store-link)
#+END_SRC

** Function Keys
#+BEGIN_SRC emacs-lisp
(global-set-key [f1] 'repeat-complex-command)
(global-set-key [f2] 'recentf-open-files)
(global-set-key [f3] 'undo)
(global-set-key [f4] 'find-name-dired)
(global-set-key [f5] 'revert-buffer)
(global-set-key [f6] 'compile)
(global-set-key [f7] 'eval-region)
(global-set-key [f9] 'projectile-grep)
(global-set-key [f10] 'flycheck-next-error)
; f11 for reserved
; cannot set f12
(global-set-key [f12] 'projectile-grep)

#+END_SRC

** With self prefix
#+BEGIN_SRC emacs-lisp
(bind-key "i" (lambda () "" (interactive) (find-file "/Users/shawn/Org/agenda/mars.org")) self-prefix)
(bind-key "d" (lambda () "" (interactive) (find-file "/Users/shawn/Org/diary.org")) self-prefix)
(bind-key "l" (lambda () "" (interactive) (find-file "/Users/shawn/Org/active.org")) self-prefix)
(bind-key "o" 'browse-url-at-point self-prefix)
(bind-key "O" 'org-open-at-point self-prefix)
(bind-key "c"
 (lambda () "" (interactive) (find-file "/Users/shawn/.emacs.d/config.org"))
 self-prefix)

#+END_SRC

* yasnippet
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

[[https://github.com/joaotavora/yasnippet][Yasnippet]] is the snippet tool to use within Emacs:

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :demand t
  :mode ("/\\.emacs\\.d/etc/yasnippet/snippets/" . snippet-mode)
  :diminish yas-minor-mode
  :defer 15
  :config
;  (yas-load-directory (concat my-user-emacs-directory "etc/yasnippet/snippets/"))
  (yas-load-directory (concat my-user-emacs-directory "elpa/yasnippet-snippets-20210910.1959"))
  (add-to-list 'yas-snippet-dirs "/Users/shawn/.emacs.d/snippets")
  (yas-global-mode 1)
)
#+END_SRC

* Projectile and helm
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2018-03-26 Mon 09:40]
:END:
#+begin_src emacs-lisp :tangle yes
(projectile-global-mode)
(setq projectile-completion-system 'helm)
(helm-projectile-on)
#+end_src
Ignore node_modules when using projectile-grep
#+begin_src emacs-lisp :tangle yes
(add-to-list 'grep-find-ignored-directories "node_modules")
#+end_src
* UTF-8 and codings
CLOSED: [2021-09-16 Thu 11:11]
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

Activate UTF-8 mode:
#+BEGIN_SRC emacs-lisp
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+END_SRC

When I paste from the Windows clipboard, I tend to get messed up
Umlauts and special characters. This ought to fix it but I think that
this does not work either:

#+BEGIN_SRC emacs-lisp
(cond ((my-system-type-is-windows)
       ;; on Windows, 'utf-8 does not work properly when system
       ;; clipboard gets yanked
       (setq selection-coding-system 'utf-16le-dos)

       ;; For example: =\344= instead of =ä= on Windows 7:
       ;;(set-selection-coding-system 'iso-latin-1-dos)
       )

      ((my-system-type-is-gnu)
       (set-selection-coding-system 'utf-8)
       )
      (t
       (set-selection-coding-system 'utf-8)
       )
      )

;; 2013-12-10 IRC #Emacs
(set-clipboard-coding-system 'utf-8)

;; http://www.masteringemacs.org/articles/2012/08/09/working-coding-systems-unicode-emacs/
;; in addition to the lines above:

(set-default-coding-systems 'utf-8)
;; backwards compatibility as default-buffer-file-coding-system
;; is deprecated in 23.2.
(if (boundp 'buffer-file-coding-system)
    ;; NOTE: default-buffer-file-coding-system is obsolete; use
    ;;       buffer-file-coding-system if found
    (setq-default buffer-file-coding-system 'utf-8)
  (setq default-buffer-file-coding-system 'utf-8))
;; Treat clipboard input as UTF-8 string first; compound text next, etc.
(setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING))
#+END_SRC

From: https://www.masteringemacs.org/article/working-coding-systems-unicode-emacs
#+BEGIN_QUOTE
[…] One problem with the universal coding system argument is that it
only cares about Emacs’s settings, not those of your shell or system.
That’s a problem, because tools like Python use the environment
variable PYTHONIOENCODING to set the coding system for the Python
interpreter.

I have written the following code that advises the
universal-coding-system-argument function so it also, temporarily for
just that command, sets a user-supplied list of environment variables
to the coding system. […]
#+END_QUOTE

#+BEGIN_SRC emacs-lisp
(defvar universal-coding-system-env-list '("PYTHONIOENCODING")
  "List of environment variables \\[universal-coding-system-argument] should set")

(defadvice universal-coding-system-argument (around provide-env-handler activate)
  "Augments \\[universal-coding-system-argument] so it also sets environment variables

Naively sets all environment variables specified in
`universal-coding-system-env-list' to the literal string
representation of the argument `coding-system'.

No guarantees are made that the environment variables set by this advice support
the same coding systems as Emacs."
  (let ((process-environment (copy-alist process-environment)))
    (dolist (extra-env universal-coding-system-env-list)
      (setenv extra-env (symbol-name (ad-get-arg 0))))
    ad-do-it))
#+END_SRC

* Org-mode
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:
Profiling Org-mode config loading time:
#+BEGIN_SRC emacs-lisp
(defvar my-org-config-start-time (current-time) "Time when my org-mode config was started")
(message "★→ Org-mode")
#+END_SRC

** Load Org and misc contrib packages

Since a couple of major releases GNU/Emacs comes with an Org-mode
version built in. However, I do prefer the [[http://orgmode.org/cgit.cgi/org-mode.git/log/?h=maint]["maint" branch]] of the
[[http://orgmode.org/cgit.cgi/org-mode.git/][Org-mode Git repository]] instead. See also [[http://orgmode.org/manual/Installation.html][Installation - The Org
Manual]].

Note that the Org-mode paths to my manually installed Org-mode are set
within =init.el= already.

assign file extensions to Org-mode:
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\)$" . org-mode))
#+END_SRC

2014-10-29 test
#+BEGIN_SRC emacs-lisp
(setq org-babel-safe-header-args nil)
#+END_SRC

Loading contributed packages:
#+BEGIN_SRC emacs-lisp
(use-package org-checklist
 :load-path "~/.emacs.d/contrib/org-mode/contrib/lisp/"
)
(use-package org-depend
 :load-path "~/.emacs.d/contrib/org-mode/contrib/lisp/"
)
(use-package org-expiry
 :load-path "~/.emacs.d/contrib/org-mode/contrib/lisp/"
)
;(use-package ob-restclient
; :load-path "~/.emacs.d/contrib/ob-restclient.el/"
;)

  ;;disabled;; (my-load-local-el "contrib/org-mode/contrib/lisp/ox-confluence.el")
  ;;disabled;; (my-load-local-el "contrib/org-mode/contrib/lisp/ox-freemind.el")
  (autoload 'org-checklist "org-checklist.el")

  ;; http://repo.or.cz/w/org-mode.git?a=blob_plain;f=contrib/lisp/org-expiry.el;hb=HEAD
  ;; Expiry dates handling
  (autoload 'org-expiry "org-expiry.el")

  ;; managing bookmarks with Org-mode
  ;; http://orgmode.org/worg/org-contrib/org-protocol.html
  (autoload 'org-protocol "org-protocol")
#+END_SRC

Enable misc org modules:
#+BEGIN_SRC emacs-lisp
(setq org-modules (quote
                   (org-bbdb
        	        org-bibtex
                    org-crypt
                    org-gnus
                    org-id
                    org-info
                    org-habit
                    org-inlinetask
                    org-irc
                    org-mew
                    org-mhe
                    org-protocol
                    org-rmail
                    org-vm
                    org-wl
                    org-w3m
                    )
                   )
      )
#+END_SRC

[[http://orgmode.org/worg/org-contrib/org-favtable.html][org-favtable]]:
I was not able to find the advantage of favtables in comparison to
search or =id=-links:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org-favtable)
(setq org-favtable-id "my-favtable")
(global-set-key (kbd "C-+") 'org-favtable)
#+END_SRC
** General settings
http://www.reddit.com/r/emacs/comments/2m4b7j/help_setting_orgmode_as_the_default_major_mode/ -
«This will make it that any file without an auto-mode alist entry gets
associated with org-mode by default.»
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("'" . org-mode) t)
#+END_SRC

Might cause performance issues; http://orgmode.org/manual/Clean-view.html
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-enforce-todo-dependencies t)
  (setq org-insert-heading-respect-content nil)
  (setq org-reverse-note-order nil)
  (setq org-show-following-heading t)
  (setq org-show-hierarchy-above t)
  (setq org-show-siblings nil)
  (setq org-deadline-warning-days 1)
  (setq org-blank-before-new-entry (quote ((heading . t)
					   (plain-list-item . nil))))
#+END_SRC


Logging into drawers:
#+BEGIN_SRC emacs-lisp
  (setq org-log-done (quote time))
  (setq org-log-into-drawer t)
  (setq org-log-redeadline (quote note));; record when the deadline date of a tasks is modified
  (setq org-log-reschedule (quote time))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (setq org-return-follows-link t)
  (setq org-remove-highlights-with-change nil)
  (setq org-read-date-prefer-future nil)
  (setq org-list-demote-modify-bullet (quote (("+" . "-")
					      ("*" . "-")
					      ("1." . "-")
					      ("1)" . "-"))))
  (setq split-width-threshold 9999);; Minimum width for splitting windows sensibly.
  (setq global-auto-revert-mode t)
  (setq require-final-newline nil)
  (setq org-adapt-indentation nil);; do not indent drawers/body according to heading level
#+END_SRC

Default state for repeating/recurring events
  - see http://orgmode.org/org.html#Repeated-tasks and http://orgmode.org/org.html#fn-77
#+BEGIN_SRC emacs-lisp
(setq org-todo-repeat-to-state "NEXT")
#+END_SRC

Smart navigation: begin/end of line is different for headings, list items, …
#+BEGIN_SRC emacs-lisp
  (setq org-special-ctrl-a/e t)
  (setq org-special-ctrl-k t)
#+END_SRC

Smart yanking: https://www.gnu.org/software/emacs/manual/html_node/org/Structure-editing.html
#+BEGIN_SRC emacs-lisp
  (setq org-yank-adjusted-subtrees t)
#+END_SRC

- until 2016-11-10, the defaults were OK to me
  - with update to Org 9, jumping from agenda to hidden heading reveales only heading but not ancestors as before
#+BEGIN_SRC emacs-lisp
  (setq org-show-context-detail
        '((agenda . lineage) ;; instead of "local"
          (bookmark-jump . lineage)
          (isearch . lineage)
          (default . ancestors))
        )
#+END_SRC

Set the timestamps of =expiry.el= to inactive ones:
http://comments.gmane.org/gmane.emacs.orgmode/20934
#+BEGIN_SRC emacs-lisp
  (setq org-expiry-inactive-timestamps t)
#+END_SRC

Prevent accidental deleting of hole subtrees or similar
  - http://orgmode.org/Changes.html -> New option org-catch-invisible-edits
#+BEGIN_SRC emacs-lisp
  (setq org-catch-invisible-edits "smart")
#+END_SRC

Use IDO for target completion:
#+BEGIN_SRC emacs-lisp
  (setq org-completion-use-ido t)
#+END_SRC


Disable property inheritance (in order to seed up)
- https://www.gnu.org/software/emacs/manual/html_node/org/Property-inheritance.html
#+BEGIN_SRC emacs-lisp
  (setq org-use-property-inheritance nil)
#+END_SRC

https://www.gnu.org/software/emacs/manual/html_node/org/Matching-tags-and-properties.html
#+BEGIN_SRC emacs-lisp
  (setq org-tags-match-list-sublevels nil)
#+END_SRC

Prevent auto-filling for source code:
#+BEGIN_SRC emacs-lisp
  ;(setq org-src-prevent-auto-filling t)
#+END_SRC

From: Release Notes v8.1: http://orgmode.org/worg/agenda-optimization.html
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-ignore-drawer-properties '(effort appt stats));; agenda performance
#+END_SRC

Automatically write =CREATED= properties in the =PROPERTIES= drawer:
#+BEGIN_SRC emacs-lisp
  (org-expiry-insinuate)
  ;; not checked yet: (setq org-expiry-handler-function 'org-expiry-archive-subtree)
#+END_SRC

Checking org-mode syntax:
#+BEGIN_SRC emacs-lisp :tangle no
(require 'org-lint)
#+END_SRC

Open corresponding =.org_archive= file with ~ff-find-other-file~

https://twitter.com/_wilfredh/status/708046038200950787 « =M-x
describe-function= shows the docstring, which mentions
ff-other-file-alist.»
#+BEGIN_SRC emacs-lisp
  ;;
  (defvar my-cpp-other-file-alist
  '(("\\.org\\'" (".org_archive"))
    ;;("\\.ipp\\'" (".hpp" ".cpp"))
    ;;("\\.hpp\\'" (".ipp" ".cpp"))
    ;;("\\.cxx\\'" (".hxx" ".ixx"))
    ;;("\\.ixx\\'" (".cxx" ".hxx"))
    ;;("\\.hxx\\'" (".ixx" ".cxx"))
    ;;("\\.c\\'" (".h"))
    ;;("\\.h\\'" (".c"))
    ))
  (setq-default ff-other-file-alist 'my-cpp-other-file-alist)
#+END_SRC

Yasnippet settings:
http://yasnippet.googlecode.com/svn/trunk/doc/index.html
#+BEGIN_SRC emacs-lisp
  ;;disabled;(my-load-local-el "contrib/yasnippet/yasnippet.el")
  ;(add-hook 'org-mode-hook 'yas-minor-mode-on)
  (setq yas-indent-line 'fixed) ;; fixes Org-mode issue with yasnippets: https://github.com/capitaomorte/yasnippet/issues/362
#+END_SRC

: From: Bastien <bzg@altern.org>
: Newsgroups: gmane.emacs.orgmode
: Subject: Re: scale inline images in orgmode
: Date: Thu, 30 Aug 2012 15:52:59 +0200
: Message-ID: <87a9xcsczo.fsf@altern.org>
:
: You can now (from git master) use `org-image-actual-width'.
: (setq org-image-actual-width 300)
:   => always resize inline images to 300 pixels
: (setq org-image-actual-width '(400))
:   => if there is a #+ATTR.*: width="200", resize to 200,
:      otherwise resize to 400
: (setq org-image-actual-width nil)
:   => if there is a #+ATTR.*: width="200", resize to 200,
:      otherwise don't resize
: (setq org-image-actual-width t)
:   => Never resize and use original width (the default)
*** scimax/org-return

Smart return does add new list item, … if appropriate
- http://irreal.org/blog/?p=6131
- http://kitchingroup.cheme.cmu.edu/blog/2017/04/09/A-better-return-in-org-mode/
#+BEGIN_SRC emacs-lisp
(require 'org-inlinetask)

(defun scimax/org-return (&optional ignore)
  "Add new list item, heading or table row with RET.
A double return on an empty element deletes it.
Use a prefix arg to get regular RET. "
  (interactive "P")
  (if ignore
      (org-return)
    (cond
     ((eq 'line-break (car (org-element-context)))
      (org-return-indent))
     ;; Open links like usual
     ((eq 'link (car (org-element-context)))
      (org-open-at-point-global))
     ;; It doesn't make sense to add headings in inline tasks. Thanks Anders
     ;; Johansson!
     ((org-inlinetask-in-task-p)
      (org-return))
     ;; add checkboxes
     ((org-at-item-checkbox-p)
      (org-insert-todo-heading nil))
     ;; lists end with two blank lines, so we need to make sure we are also not
     ;; at the beginning of a line to avoid a loop where a new entry gets
     ;; created with only one blank line.
     ((and (org-in-item-p) (not (bolp)))
      (if (org-element-property :contents-begin (org-element-context))
          (org-insert-heading)
        (beginning-of-line)
        (setf (buffer-substring
               (line-beginning-position) (line-end-position)) "")
        (org-return)))
     ;;disabled;; ((org-at-heading-p)
     ;;disabled;;  (if (not (string= "" (org-element-property :title (org-element-context))))
     ;;disabled;;      (progn (org-end-of-meta-data)
     ;;disabled;;             (org-insert-heading))
     ;;disabled;;    (beginning-of-line)
     ;;disabled;;    (setf (buffer-substring
     ;;disabled;;           (line-beginning-position) (line-end-position)) "")))
     ((org-at-table-p)
      (if (-any?
           (lambda (x) (not (string= "" x)))
           (nth
            (- (org-table-current-dline) 1)
            (org-table-to-lisp)))
          (org-return)
        ;; empty row
        (beginning-of-line)
        (setf (buffer-substring
               (line-beginning-position) (line-end-position)) "")
        (org-return)))
     (t
      (org-return)))))


(define-key org-mode-map (kbd "RET")
  'scimax/org-return)
#+END_SRC
*** org-file-apps -> open files in external apps

Here is a list of file extensions that should be openend outside of Emacs:

#+BEGIN_SRC emacs-lisp
  ;;(add-to-list 'org-file-apps '("\\.odp" . system))
  ;;(add-to-list 'org-file-apps '("\\.odp" . mailcap))
  (add-to-list 'org-file-apps '("\\.odp" . "open %s"))
  ;;(add-to-list 'org-file-apps '("\\.odp" . "/usr/bin/xdg-open %s"))
#+END_SRC

Opening image files with external viewer:
- http://stackoverflow.com/questions/3973896/emacs-org-mode-file-viewer-associations
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook
	    '(lambda ()
	       (setq org-file-apps
		     (append '(
			       ("\\.png\\'" . default)
			       ("\\.jpg\\'" . default)
			       ("\\.jpeg\\'" . default)
			       ("\\.tiff\\'" . default)
			       ("\\.docx\\'" . default)
			       ("\\.xlsx\\'" . default)
			       ("\\.pptx\\'" . default)
			       ("\\.md\\'" . "open %s")
			       ) org-file-apps ))))
#+END_SRC
** org-mode-hook
Set some modes when openening a file in Org-mode:
#+BEGIN_SRC emacs-lisp :tangle no
(add-hook 'org-mode-hook
          (lambda ()
            ;; yasnippet
            ;;disabled;            (make-variable-buffer-local 'yas/trigger-key)
            ;;disabled;            (org-set-local 'yas/trigger-key [tab])
            ;;disabled;            (define-key yas/keymap [tab] 'yas/next-field-group)
            ;; flyspell mode for spell checking everywhere
            ;;disabled; (flyspell-mode 1)
            ;; auto-fill mode on
            (auto-fill-mode 1)))
#+END_SRC
** TODO keywords and faces
:PROPERTIES:
:CREATED:  [2018-03-25 Sun 09:46]
:END:

Define my default keywords:
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords (quote
                           (
                            (sequence "TODO(t)" "NEXT(n)" "STARTED(s)" "WAITING(w@/!)" "SOMEDAY(S!)" "|" "DONE(d!/!)" "CANCELLED(c@/!)" "REFERENCE(r)")
                            )
                           )
        )
#+END_SRC

Define the style of the keywords:
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
	(quote (("TODO"      :foreground "lightblue"    :weight bold)
		("NEXT"      :foreground "pink"          :weight bold)
		("STARTED"   :foreground "red"          :weight bold)
		("DONE"      :foreground "forest green" :weight bold)
		("WAITING"   :foreground "orange"       :weight bold)
		("TEAM"      :foreground "orange"       :weight bold)
		("SOMEDAY"   :foreground "magenta"      :weight bold)
		("CANCELLED" :foreground "forest green" :weight bold)
		("QUOTE"     :foreground "red"          :weight bold)
		("QUOTED"    :foreground "magenta"      :weight bold)
		("APPROVED"  :foreground "forest green" :weight bold)
		("EXPIRED"   :foreground "forest green" :weight bold)
		("REJECTED"  :foreground "forest green" :weight bold)
		("REFERENCE" :foreground "magenta"      :weight bold)
		("CLOSED"    :foreground "forest green" :weight bold)
		("PHONE"     :foreground "forest green" :weight bold))))
#+END_SRC

«Non-nil means use the fast todo selection scheme with ‘C-c C-t’.
This variable describes if and under what circumstances the cycling
mechanism for TODO keywords will be replaced by a single-key, direct
selection scheme.»
https://www.gnu.org/software/emacs/manual/html_node/org/TODO-basics.html
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-use-fast-todo-selection t)
#+END_SRC

«Non-nil means switching TODO states with S-cursor counts as state change.
This is the default behavior.  However, setting this to nil allows a
convenient way to select a TODO state and bypass any logging associated
with that.»
https://www.gnu.org/software/emacs/manual/html_node/org/TODO-basics.html
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-treat-S-cursor-todo-selection-as-state-change nil)
#+END_SRC

CANCELED -> add ARCHIVE-tag: http://article.gmane.org/gmane.emacs.orgmode/64852
- disabled 2015-12-07
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-todo-state-tags-triggers
      (quote (("CANCELLED"
      	 ("ARCHIVE" . t))
      	("WAITING"
      	 ("WAITING" . t))
      	(done
      	 ("WAITING"))
      	("TODO"
      	 ("WAITING")
      	 ("CANCELLED"))
      	("NEXT"
      	 ("WAITING"))
      	("STARTED"
      	 ("WAITING"))
      	("DONE"
      	 ("WAITING")
      	 ("CANCELLED")))))
#+END_SRC

Change font for DONE tasks
- https://lists.gnu.org/archive/html/emacs-orgmode/2007-03/msg00179.html
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-fontify-done-headline t)
(custom-set-faces
 '(org-done ((t (:foreground "PaleGreen"
                 :weight normal
                 :strike-through t))))
 '(org-headline-done
            ((((class color) (min-colors 16) (background dark))
               (:foreground "LightSalmon" :strike-through t)))))
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
(setq org-default-notes-file "~/org/agenda/mars.org")
(define-key global-map "\C-cc" 'org-capture)
#+END_SRC

*** Template
BEGIN of the templates:
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	`(
	  ("i" "Inbox, refile later" entry (file+headline "~/org/agenda/mars.org" "inbox")
    "\n* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)

	  ("m" "Myshare" entry (file+headline "~/org/agenda/mars.org" "Myshare")
	   "\n* %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)

    ("j" "Journal" entry (file+datetree "~/org/diary.org")
                    "* %U - %^{heading} %^g\n%?\n")

    ("t" "Team" entry (file+datetree "~/org/agenda/mars.org" "Team")
    "\n* TODO %?\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n" :empty-lines 1)
	 )
	)
#+END_SRC
** Tagging

Tags with fast selection keys
http://orgmode.org/org.html#Setting-tags

#+BEGIN_SRC emacs-lisp
  (setq org-tag-alist (quote (
 		              ("tech" . ?t)
			      ("KB" .   ?k)
			      ("tool" .   ?k)
                          ("child" . ?c)
                          ("errand" . ?e)
                          (:startgroup)
                          ("@supermarket" . ?S)
                          ("@internet" . ?I)
                          (:endgroup)
			      )))

#+END_SRC

** MobileOrg
https://mobileorg.github.io/documentation/#using-dropbox
Set dropbox dir
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org/agenda")

(setq org-mobile-directory "~/Dropbox/应用/MobileOrg")

;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Org/inbox.org")

;; Enable encryption
(setq org-mobile-use-encryption t)
;; Set a password
(setq org-mobile-encryption-password "6001")

#+END_SRC
Procedure to sync bewteen laptop and phone
1. Sync from laptop to phone
   - org-mobile-push on laptop
   - Sync on phone
2. Sync from phone to lapto
   - Sync on phone after capture
   - org-mobile-pull on laptop

** Styling

#+BEGIN_SRC emacs-lisp
(setq org-hide-leading-stars t)
(setq org-log-done t)
#+END_SRC

Nice looking bullets for headings:
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config ;; executed after loading package
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
#+END_SRC

http://orgmode.org/org.html - show blocked tasks in agenda in gray color
- OR: hide blocked tasks completely:
  - http://nflath.com/2010/03/org-mode-2/
  - http://stackoverflow.com/questions/15750480/org-mode-agenda-blocks-not-obeying-settings
#+BEGIN_SRC emacs-lisp
  ;;disabled;(setq org-agenda-dim-blocked-tasks t)
  (setq org-agenda-dim-blocked-tasks 'invisible)
#+END_SRC

** Agenda
Always highlight the current agenda line:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-agenda-mode-hook '(lambda () (hl-line-mode 1)))
#+END_SRC

Remove completed scheduled tasks from the agenda view
#+BEGIN_SRC emacs-lisp
(setq org-agenda-skip-scheduled-if-done t)
#+END_SRC

Remove completed items from search results
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-skip-timestamp-if-done t)
#+END_SRC

open agenda in same buffer, full size
#+BEGIN_SRC emacs-lisp
(setq org-agenda-window-setup 'current-window)
#+END_SRC

add diary entries in agenda view
http://orgmode.org/org.html#Weekly_002fdaily-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-include-diary t)
#+END_SRC

Sorting order for tasks on the agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-sorting-strategy
	(quote ((agenda habit-down time-up user-defined-up priority-down category-keep)
		(todo priority-down category-keep)
		(tags priority-down category-keep)
		(search category-keep))))
#+END_SRC

Start the weekly agenda today
#+BEGIN_SRC emacs-lisp
(setq org-agenda-start-on-weekday nil)
#+END_SRC

Enable display of the time grid so we can see the marker for the current time
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-time-grid
      ((daily today remove-match)
       #("----------------" 0 16
         (org-heading t))
       (800 1000 1200 1400 1600 1800 2000)))
#+END_SRC

Sticky agendas remain opened in the background so that you don't
need to regenerate them each time you hit the corresponding
keystroke. This is a big time saver.
#+BEGIN_SRC emacs-lisp :tangle no
(setq org-agenda-sticky t)
#+END_SRC

** org-agenda-custom-commands
:PROPERTIES:
:CREATED:  [2018-03-23 Fri 22:56]
:END:
Done today(Confilict with default?)
#+begin_src emacs-lisp :tangle yes
  (setq org-agenda-custom-commands
  '(

  ("cw" "Todo week"
  ((agenda "" ((org-agenda-span 7)))
  (todo "STARTED|NEXT")
  (todo "TODO")
  (todo "WAITING")
  (todo "SOMEDAY")
  ))

  ("cd" "Todo today"
  ((agenda "" ((org-agenda-span 1)))
  (todo "STARTED|NEXT")
  (todo "TODO")
  (todo "WAITING")
  ))

  ;("cf" "Done yesterday"
  ;tags (concat "+TODO=\"DONE\""
  ;        "+CLOSED>=\""
  ;        (format-time-string "[%Y-%m-%d]" (time-subtract (current-time) (days-to-time 1)))
  ;        "\"")
  ;)

  ("ct" "Accomplished today"
   ((agenda "" ((org-agenda-span 1)))
   (tags (concat "CLOSED>=\""
           (format-time-string "[%Y-%m-%d]" (current-time))
           "\""))
   ))

  ))
#+end_src

** babel - working with source code
Activate Babel languages:
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
   'org-babel-load-languages
   '(
;    (ipython . t)
     (python . t)
     (ruby . t)
     (gnuplot . t)
     (shell . t)
     (org . t)
     (R . t)
     (emacs-lisp . t)
     (ditaa . t)
     (dot . t)
     (plantuml . t)
     (js . t)
     ))
#+END_SRC

#+RESULTS:

Inhibit evaluation of code blocks during export
http://orgmode.org/manual/Exporting-code-blocks.html
#+BEGIN_SRC emacs-lisp
  (setq org-export-babel-evaluate nil)
#+END_SRC

Do not prompt to confirm evaluation:
This may be dangerous - make sure you understand the consequences
of setting this -- see the docstring for details
#+BEGIN_SRC emacs-lisp
  (setq org-confirm-babel-evaluate nil)
#+END_SRC
** PlantUML
:PROPERTIES:
:CREATED:  [2017-09-22 Fri 21:53]
:ID:       28D00310-32B6-45CA-9138-A296F193AE62
:END:

Forget [[https://en.wikipedia.org/wiki/DOT_(graph_description_language)][dot]]. :-)

[[http://plantuml.com/][PlantUML]] is a handy tool for drawing simple diagrams. It is [[https://zhangweize.wordpress.com/2010/08/27/a-new-version-of-ob-plantuml/][part of
Org-mode since 2010]] and is a wrapper to dot, allowing higher-level
definitions.

As [[http://eschulte.github.io/babel-dev/DONE-integrate-plantuml-support.html][an example]], the following block gets exported as a cool diagram:
#+begin_src plantuml :file myplantuml.png
  Alice -> Bob: synchronous call
  Alice ->> Bob: asynchronous call
#+end_src

#+BEGIN_SRC emacs-lisp
(require 'ob-plantuml)
(setq org-plantuml-jar-path (concat my-user-emacs-directory "bin/plantuml.jar")) ;; I keep the jar file in my ".emacs.d/bin"
#+END_SRC

For a maximum of editing experience and a very cool preview, you also
want to install [[https://github.com/skuro/plantuml-mode][plantuml-mode]]:

#+BEGIN_SRC emacs-lisp
  (use-package plantuml-mode
    :load-path  (lambda () (expand-file-name (concat my-user-emacs-directory "contrib/plantuml-mode")))
    :config
    (add-to-list 'auto-mode-alist '("\\.plantuml\\'" . plantuml-mode)) ;; Enable plantuml-mode for PlantUML files
    (add-to-list
     'org-src-lang-modes '("plantuml" . plantuml))
    )
#+END_SRC

| =M-x plantuml-preview= | order of preference: SVG, PNG, ASCII                                                     |
|------------------------+------------------------------------------------------------------------------------------|
| =C-c C-c=              | preview: renders a PlantUML diagram from the current buffer in the best supported format |
| =C-u C-c C-c=          | preview in other window                                                                  |
| =C-u C-u C-c C-c=      | preview in other frame                                                                   |

*** Example to draw ER diagram
:PROPERTIES:
:CREATED:  [2018-03-27 Tue 19:55]
:END:
#+begin_src plantuml :file myplantuml.png
' uncomment the line below if you're using computer with a retina display
' skinparam dpi 300
!define Table(name,desc) class name as "desc" << (T,#FFAAAA) >>
' we use bold for primary key
' green color for unique
' and underscore for not_null
!define primary_key(x) <b>x</b>
!define unique(x) <color:green>x</color>
!define not_null(x) <u>x</u>
' other tags available:
' <i></i>
' <back:COLOR></color>, where color is a color name or html color code
' (#FFAACC)
' see: http://plantuml.com/classes.html#More
hide methods
hide stereotypes

' entities

Table(user, "user\n(User in our system)") {
primary_key(id) INTEGER
not_null(unique(username)) VARCHAR[32]
not_null(password) VARCHAR[64]
}

Table(session, "session\n(session for user)") {
primary_key(id) INTEGER
not_null(user_id) INTEGER
not_null(unique(session_id) VARCHAR[64]
}

Table(user_profile, "user_profile\n(Some info of user)") {
primary_key(user_id) INTEGER
age SMALLINT
gender SMALLINT
birthday DATETIME
}

Table(group, "group\n(group of users)") {
primary_key(id) INTEGER
not_null(name) VARCHAR[32]
}

Table(user_group, "user_group\n(relationship of user and group)") {
primary_key(user_id) INTEGER
primary_key(group_id) INTEGER
joined_at DATETIME
}

' relationships
' one-to-one relationship
user -- user_profile : "A user only \nhas one profile"
' one to may relationship
user --> session : "A user may have\n many sessions"
' many to many relationship
' Add mark if you like
user "1" --> "*" user_group : "A user may be \nin many groups"
group "1" --> "0..N" user_group : "A group may \ncontain many users"
#+end_src

* flycheck
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:

«[[http://www.flycheck.org/][Flycheck]] is a modern on-the-fly syntax checking extension for GNU
Emacs, intended as replacement for the older Flymake extension which
is part of GNU Emacs.»

- http://www.flycheck.org/en/latest/guide/quickstart.html
- 2016-11-05: converted to use-package according to http://www.flycheck.org/en/latest/user/installation.html#use-package
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init
  (global-flycheck-mode)
  :config
  (setq flycheck-flake8-maximum-line-length 200); http://www.flycheck.org/manual/latest/Configuring-checkers.html#Configuring-checkers
  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers  (append flycheck-disabled-checkers
  '(javascript-jshint)))
  )
#+END_SRC
use local eslint from node_modules before global
http://emacs.stackexchange.com/questions/21205/flycheck-with-file-relative-eslint-executable
#+BEGIN_SRC emacs-lisp
(defun my/use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name "node_modules/eslint/bin/eslint.js"
                                        root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))
(add-hook 'flycheck-mode-hook #'my/use-eslint-from-node-modules)
#+END_SRC

* dumb-jump
:PROPERTIES:
:CREATED:  [2018-04-10 Tue 10:04]
:END:
Jump to definition
https://github.com/jacktasia/dumb-jump
#+BEGIN_SRC emacs-lisp
(use-package dumb-jump
  :ensure t
  :init (dumb-jump-mode)
  :bind (("C-c j" . dumb-jump-go))
  :config (setq dumb-jump-selector 'helm)
  )
#+END_SRC
* Language
:PROPERTIES:
:CREATED:  [2021-09-16 Thu 11:11]
:END:
** JS

Use js2-mode as major mode
#+BEGIN_SRC emacs-lisp
(require 'js2-mode)
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
#+END_SRC

Use js-comint for console support
https://github.com/redguardtoo/js-comint
#+BEGIN_SRC emacs-lisp
(require 'js-comint)
(add-hook 'js2-mode-hook
          (lambda ()
            (local-set-key (kbd "C-x C-e") 'js-send-last-sexp)
            (local-set-key (kbd "C-M-x") 'js-send-last-sexp-and-go)
            (local-set-key (kbd "C-c b") 'js-send-buffer)
            (local-set-key (kbd "C-c C-b") 'js-send-buffer-and-go)
            (local-set-key (kbd "C-c l") 'js-load-file-and-go)))
#+END_SRC

*** indent
#+BEGIN_SRC emacs-lisp
(setq js-indent-level 2)
#+END_SRC

*** jsdoc
:PROPERTIES:
:CREATED:  [2018-03-26 Mon 19:44]
:END:
#+begin_src emacs-lisp :tangle yes
(add-to-list 'load-path "~/.emacs.d/contrib/")
(require 'js-doc)

; (setq js-doc-mail-address "your email address"
;        js-doc-author (format "your name <%s>" js-doc-mail-address)
;        js-doc-url "url of your website"
;       js-doc-license "license name")

(add-hook 'js2-mode-hook
#'(lambda ()
(define-key js2-mode-map "\C-ci" 'js-doc-insert-function-doc)
(define-key js2-mode-map "@" 'js-doc-insert-tag)))
#+end_src

#+RESULTS:
| lambda | nil | (define-key js2-mode-map i (quote js-doc-insert-function-doc)) | (define-key js2-mode-map @ (quote js-doc-insert-tag))        |                                                    |                                                             |                                                         |
| lambda | nil | (local-set-key (kbd C-x C-e) (quote js-send-last-sexp))          | (local-set-key (kbd C-M-x) (quote js-send-last-sexp-and-go)) | (local-set-key (kbd C-c b) (quote js-send-buffer)) | (local-set-key (kbd C-c C-b) (quote js-send-buffer-and-go)) | (local-set-key (kbd C-c l) (quote js-load-file-and-go)) |

** CSS
*** Color
#+BEGIN_SRC emacs-lisp
(defvar hexcolour-keywords
  '(("#[abcdef[:digit:]]\\{6\\}"
     (0 (put-text-property
         (match-beginning 0)
         (match-end 0)
         'face (list :background
                     (match-string-no-properties 0)))))))
(defun hexcolour-add-to-font-lock ()
  (font-lock-add-keywords nil hexcolour-keywords))
(add-hook 'css-mode-hook 'hexcolour-add-to-font-lock)
#+END_SRC
*** indent
#+BEGIN_SRC emacs-lisp
(setq css-indent-offset 2)
#+END_SRC

** Html
*** zencoding
Auto-start on any markup modes
#+BEGIN_SRC emacs-lisp
(use-package zencoding-mode)
(require 'zencoding-mode)
(add-hook 'sgml-mode-hook 'zencoding-mode)
#+END_SRC

** C
#+BEGIN_SRC emacs-lisp
(require 'cc-mode)
(require 'google-c-style)
(add-hook 'c++-mode-hook
  (lambda ()
    (set (make-local-variable 'compile-command)
         (format "g++ -g -Wall -std=c++11 %s" (buffer-name)))))

(add-hook 'c-mode-hook
  (lambda ()
    (set (make-local-variable 'compile-command)
         (format "gcc -Wall %s" (buffer-name)))))

(defun my-c-mode-common-hook ()
  (google-set-c-style)
  (setq tab-width 4) ;; change this to taste, this is what K&R uses <img src="http://zhanxw.com/blog/wp-includes/images/smilies/simple-smile.png" alt=":)" class="wp-smiley" style="height: 1em; max-height: 1em;">
  ;(my-build-tab-stop-list tab-width)
  (setq c-basic-offset tab-width)
  (setq indent-tabs-mode nil) ;; force only spaces for indentation
  (local-set-key "\C-o" 'ff-get-other-file)
  (c-set-offset 'substatement-open 0)
  ;(c-set-offset 'arglist-intro c-lineup-arglist-intro-after-paren)
  )
(add-hook 'c-mode-common-hook 'my-c-mode-common-hook)
(add-hook 'c++-mode-common-hook 'my-c-mode-common-hook)

(google-make-newline-indent)
#+END_SRC

** Golang
#+begin_src emacs-lisp
  (use-package go-mode)

  (require 'go-eldoc)

  (add-hook 'go-mode-hook 'go-eldoc-setup)
  ;; (add-hook 'go-mode-hook
  ;;   (lambda ()
  ;;   (add-hook 'before-save-hook 'gofmt-before-save)
  ;;   (setq tab-width 4)
  ;;   (setq indent-tabs-mode 1)))
  (defun my-go-setup ()
    (setq gofmt-command "goimports")
    (add-hook 'before-save-hook 'gofmt-before-save)
    (setq tab-width 4)
    (setq indent-tabs-mode 1)
    (setq gofmt-show-errors nil)
  )
  (eval-after-load 'flycheck
      '(add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))
  (add-hook 'go-mode-hook 'my-go-setup)
#+end_src


* Custom variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(openwith-associations
   (quote
    (("\\.pdf\\'" "acroread"
      (file))
     ("\\.mp3\\'" "xmms"
      (file))
     ("\\.\\(?:mpe?g\\|avi\\|wmv\\)\\'" "mplayer"
      ("-idx" file))
     ("\\.\\(?:jp?g\\|png\\)\\'" "open"
      (file)))))
 '(openwith-mode t)
 '(org-agenda-files (quote ("~/Org/agenda")))
 '(org-html-head-include-default-style nil)
 '(package-selected-packages
   (quote
    (el-get solidity-mode openwith image+ picpocket markdown-mode sr-speedbar projectile org helm-swoop helm-gtags function-args flx-ido company coffee-mode ack)))
 )
#+END_SRC
* Closing and end for profiling

This is the end of the Elisp blocks to be tangled. Finishing up
loading my configuration (famous last words):

#+BEGIN_SRC emacs-lisp
(message "→★ finished loading config.org in %.2fs" (float-time (time-subtract (current-time) my-config-el-start-time)))
#+END_SRC
